package com.framework.utils.logger;

import io.qameta.allure.Allure;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;
import org.testng.ITestContext;
import org.testng.ITestResult;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Log4j –∏ Allure.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —à–∞–≥–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ Allure.
 */

public class TestLogger {
    /**
     * –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–æ–≤.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ –ª–æ–≥–∞—Ö.
     */
    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
    /**
     * –õ–æ–≥–≥–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ç–µ—Å—Ç–æ–≤.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—á–∞–ª–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.
     */
    private final Logger log;
    /**
     * –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
     */
    private long testStartTime;
    /**
     * –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤.
     */
    private long suiteStartTime;
    /**
     * –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∞.
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤.
     */
    private String uniqueid;
    /**
     * –ò–º—è —Ç–µ—Å—Ç–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤.
     */
    private String testName;
    /**
     * –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.
     */
    private String logTestFilePath;
    /**
     * –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.
     */
    private String logSuiteFilePath;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ TestLogger.
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ç–µ—Å—Ç–∞.
     *
     * @param testClass –ö–ª–∞—Å—Å —Ç–µ—Å—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–≥–≥–µ—Ä.
     */
    public TestLogger(Class<?> testClass) {
        this.log = LogManager.getLogger(testClass);
    }

    public void initSuite(String suiteName) {
        this.suiteStartTime = System.currentTimeMillis();
        this.logSuiteFilePath = String.format("target/logs/suite_%s_%s.log",
                suiteName,
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")));
        ThreadContext.put("logFile", logSuiteFilePath);
        ensureLogDirectoryExists();
        log.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: {}", suiteName);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏–º—è —Ç–µ—Å—Ç–∞, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
     * –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤.
     *
     * @param result –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ.
     */
    public void initTest(ITestResult result) {
        this.testName = result.getMethod().getMethodName();
        this.testStartTime = System.currentTimeMillis();
        this.uniqueid = UUID.randomUUID().toString().substring(0, 6);
        this.logTestFilePath = String.format("target/logs/%s_%s_%s",
                testName,
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")),
                uniqueid);

        ThreadContext.put("testName", testName);
        ThreadContext.put("logFile", logTestFilePath);

        ensureLogDirectoryExists();
        logTestStart();
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç, –∑–∞–ø–∏—Å—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     * –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ Allure –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param result –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ.
     */
    public void finishTest(ITestResult result) {
        long duration = System.currentTimeMillis() - testStartTime;
        String status = result.isSuccess() ? "–ü–†–û–ô–î–ï–ù" : "–ü–†–û–í–ê–õ–ï–ù";

        logTestEnd(status, duration);
        attachLogsToAllure(logTestFilePath);
        ThreadContext.clearAll();
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ –≤ —Ç–µ—Å—Ç–µ, –¥–æ–±–∞–≤–ª—è—è –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ —à–∞–≥–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     */
    public void logStep(String message) {
        String timestamp = dtf.format(LocalDateTime.now());
        String logMessage = String.format("[–®–ê–ì] %s: %s", timestamp, message);

        log.info(logMessage); // –ü–∏—à–µ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
        //Allure.step(logMessage); // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –≤ Allure
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤.
     */
    private void ensureLogDirectoryExists() {
        try {
            Files.createDirectories(Paths.get("target/logs"));
        } catch (IOException e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤", e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞, –∑–∞–ø–∏—Å—ã–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –∏ –ø—É—Ç–∏ –∫ –ª–æ–≥–∞–º.
     * –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Allure –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ.
     */
    private void logTestStart() {
        String startMessage = formatTestMessage(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
                "üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê: " + testName,
                "üìÅ –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: " + logTestFilePath + ".log",
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        );

        log.info(startMessage);
        Allure.addAttachment("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞", "text/plain", startMessage);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –∑–∞–ø–∏—Å—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     * –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Allure –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ.
     *
     * @param status   –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ (–ü–†–û–ô–î–ï–ù –∏–ª–∏ –ü–†–û–í–ê–õ–ï–ù).
     * @param duration –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
     */
    private void logTestEnd(String status, long duration) {
        String statusIcon = status.equals("–ü–†–û–ô–î–ï–ù") ? "‚úÖ" : "‚ùå";
        String endMessage = formatTestMessage(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
                statusIcon + " –ö–û–ù–ï–¶ –¢–ï–°–¢–ê: " + testName,
                "‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + " –º—Å",
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        );

        log.info(endMessage);
        Allure.addAttachment("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞", "text/plain", endMessage);
    }

    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –ª–æ–≥–∏ —Ç–µ—Å—Ç–∞ –∫ –æ—Ç—á–µ—Ç—É Allure.
     * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ –≤ Allure.
     *
     * @param logPath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–∞.
     */
    private void attachLogsToAllure(String logPath) {
        try {
            String logs = Files.readString(Paths.get(logPath + ".log"));
            Allure.addAttachment("–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ —Ç–µ—Å—Ç–∞", "text/plain", logs);
        } catch (IOException e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏ —Ç–µ—Å—Ç–∞", e);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏.
     *
     * @param lines –°—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @return –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    private String formatTestMessage(String... lines) {
        return String.join("\n", lines);
    }

    public void logScreenshot(String description, String screenshotPath) {
        log.info("–°–∫—Ä–∏–Ω—à–æ—Ç: {} - {}", description, screenshotPath);
        Allure.addAttachment(description, "image/png",
                Path.of(screenshotPath).toAbsolutePath().toString());
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç API, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ Allure –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –≤ —Ç–µ—Å—Ç–∞—Ö.
     *
     * @param request  –ó–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫ API.
     * @param response –û—Ç–≤–µ—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç API.
     */
    public void logRequestResponse(String request, String response) {
        String message = String.format("Request:\n%s\nResponse:\n%s", request, response);
        log.debug(message);
        Allure.addAttachment("API Request/Response", "text/plain", message);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥.
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     */
    public void info(String message) {
        log.info(message);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥.
     *
     * @param message   –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param testName  –ò–º—è —Ç–µ—Å—Ç–∞.
     * @param throwable –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å).
     */
    public void error(String message, String testName, Throwable throwable) {
        log.error(message, testName, throwable);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ —Å—É–±—ä–µ–∫—Ç–æ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
     *
     * @param s       –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param element –≠–ª–µ–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * @param subject –°—É–±—ä–µ–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public void debug(String s, String element, String subject) {
        log.debug(s, element, subject);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º, —Å—É–±—ä–µ–∫—Ç–æ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–µ—Å—Ç–∞—Ö.
     *
     * @param s        –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param element  –≠–ª–µ–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * @param subject  –°—É–±—ä–µ–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * @param duration –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
     */
    public void info(String s, String element, String subject, long duration) {
        log.info(s, element, subject, duration);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º, —Å—É–±—ä–µ–∫—Ç–æ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–µ—Å—Ç–∞—Ö.
     *
     * @param s        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param element  –≠–ª–µ–º–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * @param subject  –°—É–±—ä–µ–∫—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * @param duration –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
     */
    public void error(String s, String element, String subject, long duration) {
        log.error(s, element, subject, duration);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–æ–¥–æ–º –∏ URI.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö.
     *
     * @param s      –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param method –ú–µ—Ç–æ–¥ HTTP-–∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GET, POST).
     * @param uri    URI –∑–∞–ø—Ä–æ—Å–∞.
     */
    public void info(String s, String method, String uri) {
        log.info(s, method, uri);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤.
     *
     * @param s    –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param <T>  –¢–∏–ø —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞.
     */
    public <T> void debug(String s, T body) {
        log.debug(s, body);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤.
     *
     * @param s    –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param <T>  –¢–∏–ø —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞.
     */
    public <T> void info(String s, T body) {
        log.debug(s, body);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–º–µ–Ω–µ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–±—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
     *
     * @param s    –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param name –ò–º—è, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Ç–µ—Å—Ç–∞).
     */
    public void info(String s, String name) {
        log.info(s, name);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä, –∑–∞–ø–∏—Å—ã–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     * –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ Allure –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö.
     */
    public void finishSuite(ITestContext context) {
        ThreadContext.put("logFile", logSuiteFilePath);
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: {}", context.getSuite().getName());
        String endMessage = formatTestMessage(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
                "‚úÖ –¢–ï–°–¢–û–í–´–ô –ù–ê–ë–û–† –ó–ê–í–ï–†–®–ï–ù: " + context.getSuite().getName(),
                "‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + (System.currentTimeMillis() - suiteStartTime) + " –º—Å",
                "üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: " + logSuiteFilePath + ".log",
                "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " + LocalDateTime.now().format(dtf),
                "‚úÖÔ∏è –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " + context.getPassedTests().size(),
                "‚ùóÔ∏è –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " + context.getFailedTests().size(),
                "‚ùóÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " + context.getSkippedTests().size(),
                "‚ùóÔ∏è –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " + context.getFailedButWithinSuccessPercentageTests().size(),
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        );
        log.info(endMessage);
        attachLogsToAllure(logSuiteFilePath);
        Allure.addAttachment("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞", "text/plain", endMessage);
        ThreadContext.clearAll();
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤.
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     */
    public void error(String message) {
        log.error(message);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤.
     *
     * @param s       –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param message –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ.
     */
    public void error(String s, String message) {
        log.error(s, message);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω null.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π.
     *
     * @param attemptedToSerializeNullObject –°–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ null-–æ–±—ä–µ–∫—Ç–∞.
     */
    public void warn(String attemptedToSerializeNullObject) {
        log.warn(attemptedToSerializeNullObject);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤.
     *
     * @param s         –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     * @param throwable –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ—à–∏–±–∫–æ–π.
     */
    public void error(String s, Throwable throwable) {
        if (throwable != null) {
            log.error(s, throwable);
        } else {
            log.error(s);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.
     *
     * @param s –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.
     */
    public void warn(String s, Throwable throwable) {
        if (throwable != null) {
            log.warn(s, throwable);
        } else {
            log.warn(s);
        }
    }
}
